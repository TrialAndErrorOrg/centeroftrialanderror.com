---
import { SITE, BLOG } from '../../../config.mjs'

import Layout from '../../../layouts/BlogLayout.astro'
import Pagination from '../../../components/atoms/Pagination.astro'

import { getCanonical, getPermalink, cleanSlug, AUTHOR_BASE } from '../../../utils/permalinks'
import { getPosts } from '../../../utils/blog.js'
import type { GetStaticPaths } from 'astro'
import PostCard from '../../../components/blog/PostCard.astro'
import type { Author, BlogPost } from '@/types'
import { Image } from '@astrojs/image/components'
import { FaEnvelope, FaGithub, FaLink, FaLinkedin, FaOrcid, FaTwitter } from 'react-icons/fa/index'
import { EmailRevealButton } from './EmailRevealButton'

interface Props {
  page: {
    currentPage: number
    totalPages: number
    url: {
      current: string
      prev: string
      next: string
    }
    data: BlogPost[]
  }
  author: Author
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  if (BLOG?.disabled || BLOG?.author?.disabled) return []

  const posts = await getPosts()

  const authors: Record<string, Author> = Object.fromEntries(
    posts
      .flatMap((post) => [...(post.blog_authors ?? []), ...(post.team_members ?? [])])
      .map((author) => [author.lastName, author])
  )

  return Object.entries(authors).map(([lastName, author]) =>
    paginate(
      posts.filter((post) =>
        [...(post.blog_authors ?? []), ...(post.team_members ?? [])].some(
          (a: Author) => a.lastName === lastName
        )
      ),
      {
        params: {
          author: author.slug ?? cleanSlug(lastName ?? ''),
          authors: AUTHOR_BASE || undefined,
        },
        pageSize: BLOG.postsPerPage,
        props: { author },
      }
    )
  )
}

const { page, author } = Astro.props

const currentPage = page.currentPage ?? 1

const meta = {
  title: `${author.firstName} ${author.lastName} ${
    currentPage > 1 ? `— Page ${currentPage} ` : ''
  }— ${SITE.name}`,
  description: SITE.description,
  canonical: getCanonical(getPermalink(page.url.current)).toString(),
}
console.log(author)
---

<Layout meta={meta}>
  <Fragment slot="title">
    <span>{author.firstName} {author.lastName}</span>

    {
      'show_pronouns' in author && author.show_pronouns && (
        <p class="text-center text-3xl text-orange-500 dark:text-gray-400 md:text-4xl">
          {author.pronouns}
        </p>
      )
    }
  </Fragment>
  <div class="flex mb-20 flex-col max-w-4xl mx-auto">
    <Image
      src={author.image.url}
      alt={author.image.alt}
      width={author.image.width}
      height={author.image.height}
      class="rounded-full w-40 h-40 md:w-60 md:h-60 object-cover mx-auto border-2 border-black"
    />
    <div class="flex flex-col justify-center items-center my-6">
      {
        'position' in author && author.position && (
          <p class="md:text-2x text-center text-xl text-black dark:text-gray-400">
            {author.position}
          </p>
        )
      }

      <div
        class="col-span-4 row-span-1 flex justify-center flex-wrap gap-1 leading-none items-center"
      >
        {
          author.orcid && (
            <a href={author.orcid} class="button-sleek flex items-center  text-black">
              <FaOrcid className="h-5 w-5" />
              <span class="sr-only">ORCID</span>
            </a>
          )
        }
        {
          author.twitter && (
            <a href={author.twitter} class="button-sleek z-10 flex items-center">
              <FaTwitter className="h-5 w-5" />
              <span class=" sr-only absolute">Twitter</span>
            </a>
          )
        }
        {
          author.github && (
            <a href={author.github} class="button-sleek z-10 flex items-center gap-1">
              <FaGithub className="h-5 w-5" />
              <span class="sr-only">Github</span>
            </a>
          )
        }
        {
          'linkedIn' in author && author.linkedIn && (
            <a href={author.linkedIn} class="button-sleek z-10 flex items-center gap-1">
              <FaLinkedin className="h-5 w-5" />
              <span class="sr-only">LinkedIn</span>
            </a>
          )
        }
        {
          author.personalWebsite && (
            <a href={author.personalWebsite} class="button-sleek z-10 flex items-center gap-1">
              <FaLink className="h-5 w-5" />
              <span class="sr-only">Website</span>
            </a>
          )
        }
        {
          author.email && (
            <div class="button-sleek z-10 flex items-center gap-1">
              <EmailRevealButton
                client:load
                classNameIcon="h-5 w-5"
                classNameRevealed="underline font-semibold"
                email={author.email}
              />
            </div>
          )
        }
      </div>
    </div>
    <div class="prose" set:html={author.summary || author.bio}></div>
  </div>
  <div class="max-w-4xl flex-col flex gap-6 mx-auto">
    <h2 class="text-2xl md:text-4x font-bold">Posts by {author.firstName} {author.lastName}</h2>
    {page.data.map((post) => <PostCard wide post={post} />)}
  </div>
  <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
</Layout>
