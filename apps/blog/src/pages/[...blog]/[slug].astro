---
import { SITE, BLOG } from '../../config.mjs'

import Layout from '../../layouts/PageLayout.astro'
import SinglePost from '../../components/blog/SinglePost.astro'

import { getCanonical, getPermalink, cleanSlug, POST_BASE } from '../../utils/permalinks'
import { fetchPosts } from '../../utils/posts'
import { findImage } from '../../utils/images'
import { getPosts } from '../../utils/blog.js'
import type { BlogPost } from '../../utils/types.js'

interface Props {
  post: BlogPost
  prev?: BlogPost
  next?: BlogPost
  latest: BlogPost[]
}

export async function getStaticPaths() {
  if (BLOG?.disabled || BLOG?.post?.disabled) return []

  // const posts = await fetchPosts()
  const posts = (await getPosts()) ?? []

  return posts.map((post, idx) => ({
    params: {
      slug: cleanSlug(post.slug ?? '/'),
      blog: POST_BASE || undefined,
    },
    props: {
      post,
      ...(idx > 0 && { prev: posts[idx - 1] }),
      ...(idx < posts.length - 1 && { next: posts[idx + 1] }),
      latest: posts.filter((latest) => latest.id !== post.id).slice(0, 4),
    },
  }))
}

const { post, prev, next, latest } = Astro.props

const meta = {
  title: `${post.title} â€” ${SITE.name}`,
  description: post?.seo?.metaDescription ?? post.excerpt,
  canonical: post?.seo?.canonicalURL ?? getCanonical(getPermalink(post.slug, 'post')),
  image: post?.image?.formats?.thumbnail?.url ?? post.image.url, //await findImage(post.image),
  ogTitle: post.title,
  ogType: 'article',
  post,
}
---

<Layout meta={meta}>
  <SinglePost latest={latest} prev={prev} next={next} post={{ ...post, image: post.image }} />
</Layout>
